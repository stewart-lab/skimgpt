name: Release – PyPI & Docker Hub on merge to main

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  IMAGE_NAME: stewartlab/skimgpt

jobs:
  publish-pypi:
    name: Build & publish package to PyPI
    runs-on: ubuntu-latest
    # Match the environment name you registered in PyPI (optional)
    environment: production
    permissions:
      id-token: write   # ⭐ Required for OIDC trusted publishing
      contents: read
    outputs:
      version: ${{ steps.get_version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Read VERSION file
        id: get_version
        run: echo "version=$(tr -d '\n' < VERSION)" >> "$GITHUB_OUTPUT"

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Build wheel & sdist
        run: |
          python -m pip install --upgrade pip build
          python -m build            # outputs to dist/

      - name: Publish to PyPI via OIDC
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          skip-existing: true        # ignore re‑uploads if version already exists

  docker:
    name: Rebuild & push Docker image
    needs: publish-pypi
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code (no tags needed)
        uses: actions/checkout@v4

      - name: Set up Python (for PyPI probe)
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Capture version from upstream job
        id: version
        run: echo "VERSION=${{ needs.publish-pypi.outputs.version }}" >> "$GITHUB_ENV"

      - name: Wait for PyPI to propagate new release
        run: |
          for i in {1..10}; do
            if python -m pip install --dry-run skimgpt=="$VERSION"; then
              echo "Package $VERSION available on PyPI ✅"; break; fi;
            echo "Not yet available, retry #$i …"; sleep 30;
          done

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Pull existing base image
        run: docker pull $IMAGE_NAME:latest

      - name: Build updated image with fresh package
        run: |
          cat > Dockerfile.release <<'EOF'
          FROM stewartlab/skimgpt:latest
          ARG VERSION
          RUN pip install --no-cache-dir skimgpt==${VERSION}
          EOF
          docker build -f Dockerfile.release \
            --build-arg VERSION="$VERSION" \
            -t $IMAGE_NAME:${VERSION} \
            -t $IMAGE_NAME:latest \
            .

      - name: Push both tags to Docker Hub
        run: docker push --all-tags $IMAGE_NAME
